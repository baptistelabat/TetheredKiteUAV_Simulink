function [ F_L_B, F_L_C, F_L_D,...
           F_D_B, F_D_C, F_D_D  ] = calc4pKiteForces( C_L_B,C_L_C,C_L_D,...
                                                      C_D_B, C_D_C, C_D_D,...
                                                      rho, A, ASideRel,K,...
                                                      e_y_k, e_z_k,...
                                                      v_a_k_B, v_a_k_C, v_a_k_D, ...
                                                      v_a_B_xz, v_a_C_xy, v_a_D_xy)
% Lift 
F_L_B = 0.5 * rho * (v_a_B_xz'*v_a_B_xz) * A * C_L_B * cross( v_a_k_B, e_y_k )/norm( cross( v_a_k_B, e_y_k ) ); 
F_L_C = 0.5 * rho * (v_a_C_xy'*v_a_C_xy) * A * ASideRel * C_L_C * cross( v_a_k_C, e_z_k )/norm( cross( v_a_k_C, e_z_k ) ); 
F_L_D = 0.5 * rho * (v_a_D_xy'*v_a_D_xy) * A * ASideRel * C_L_D * cross( e_z_k,v_a_k_D  )/norm( cross( e_z_k,v_a_k_D  ) ); 

% Drag
F_D_B = 0.5 * rho * K * (v_a_k_B'*v_a_k_B) * A * C_D_B * v_a_k_B / sqrt(v_a_k_B'*v_a_k_B);
F_D_C = 0.5 * rho * K * (v_a_k_C'*v_a_k_C) * A * ASideRel * C_D_C * v_a_k_C / sqrt(v_a_k_C'*v_a_k_C);
F_D_D = 0.5 * rho * K * (v_a_k_D'*v_a_k_D) * A * ASideRel * C_D_D * v_a_k_D / sqrt(v_a_k_D'*v_a_k_D);

end

